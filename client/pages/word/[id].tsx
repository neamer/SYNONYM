import { GetServerSideProps } from "next";
import Head from "next/head";
import React from "react";
import HttpConfig from "../../constants/HttpConfig";
import WordSynonyms from "../../types/WordSynonyms";
import Header from "../../widgets/Header/Header";
import WordDetails, {
  WordDetailsSize,
} from "../../widgets/WordDetails/WordDetails";

import styles from "../lookup/Lookup.module.css";

type Props = {
  word: WordSynonyms;
};

const Word = ({ word }: Props) => {
  return (
    <div className={styles.container}>
      <Head>
        <title>Synonyms for {word.text} | SYNONYM</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header></Header>
      <main className={styles.mainSection}>
        <WordDetails word={word} size={WordDetailsSize.standard}></WordDetails>
      </main>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  try {
    const req = await fetch(
      HttpConfig.endPoints.get(parseInt(context.params?.id as string))
    );
    const data = await req.json();

    return {
      props: { word: data },
    };
  } catch (error) {
    return {
      notFound: true,
    };
  }
};

/*
export const getStaticProps: GetStaticProps = async (context) => {
  const req = await fetch(
    HttpConfig.endPoints.get(context.params?.input as number)
  );
  const data = await req.json();

  return {
    props: { word: data },
  };
};

export const getStaticPaths: GetStaticPaths = async (context) => {
  const req = await fetch(HttpConfig.endPoints.getAllIDs());
  const data = await req.json();

  const paths = data.json().map((id: number) => {
    return { params: { input: id } };
  });

  return {
    paths,
    fallback: false,
  };
};
*/

export default Word;
